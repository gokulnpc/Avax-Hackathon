// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package bondingCurvePrecompile

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetCostGasCost  uint64 = 21000 // Set a reasonable gas cost to prevent DoS attacks
	GetPriceGasCost uint64 = 21000 // Set a reasonable gas cost to prevent DoS attacks
	K               = 8 * 1e15     // Growth rate (k), scaled to avoid precision loss (0.01 * 10^18)
	InitialPrice    = 30000000000000 // Initial price in wei (P0), 3.00 * 10^13
	ExpPrecision    = 1e18           // Precision to maintain accuracy during exponent calculation
	MaxIterations   = 20             // Number of iterations for the exponential calculation
)
// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// BondingCurvePrecompileRawABI contains the raw ABI of BondingCurvePrecompile contract.
	//go:embed contract.abi
	BondingCurvePrecompileRawABI string

	BondingCurvePrecompileABI = contract.ParseABI(BondingCurvePrecompileRawABI)

	BondingCurvePrecompilePrecompile = createBondingCurvePrecompilePrecompile()
)

type GetCostInput struct {
	CurrentSupply *big.Int
	TokensToBuy   *big.Int
}

// UnpackGetCostInput attempts to unpack [input] as GetCostInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetCostInput(input []byte) (GetCostInput, error) {
	inputStruct := GetCostInput{}
	err := BondingCurvePrecompileABI.UnpackInputIntoInterface(&inputStruct, "getCost", input, false)

	return inputStruct, err
}

// PackGetCost packs [inputStruct] of type GetCostInput into the appropriate arguments for getCost.
func PackGetCost(inputStruct GetCostInput) ([]byte, error) {
	return BondingCurvePrecompileABI.Pack("getCost", inputStruct.CurrentSupply, inputStruct.TokensToBuy)
}

// PackGetCostOutput attempts to pack given cost of type *big.Int
// to conform the ABI outputs.
func PackGetCostOutput(cost *big.Int) ([]byte, error) {
	return BondingCurvePrecompileABI.PackOutput("getCost", cost)
}

// UnpackGetCostOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetCostOutput(output []byte) (*big.Int, error) {
	res, err := BondingCurvePrecompileABI.Unpack("getCost", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func getCost(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetCostGasCost); err != nil {
		return nil, 0, err
	}

	inputStruct, err := UnpackGetCostInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	currentSupply := inputStruct.CurrentSupply
	tokensToBuy := inputStruct.TokensToBuy

	if currentSupply == nil || tokensToBuy == nil {
		return nil, remainingGas, errors.New("invalid inputs")
	}

	// Bonding Curve Cost Calculation
	exponent1 := new(big.Int).Mul(big.NewInt(K), new(big.Int).Add(currentSupply, tokensToBuy))
	exponent1.Div(exponent1, big.NewInt(ExpPrecision)) // k * (currentSupply + tokensToBuy) / 10^18

	exponent2 := new(big.Int).Mul(big.NewInt(K), currentSupply)
	exponent2.Div(exponent2, big.NewInt(ExpPrecision)) // k * currentSupply / 10^18

	exp1 := calculateExp(exponent1)
	exp2 := calculateExp(exponent2)

	numerator := new(big.Int).Mul(big.NewInt(InitialPrice), big.NewInt(ExpPrecision))
	cost := new(big.Int).Sub(exp1, exp2)
	cost.Mul(numerator, cost)
	cost.Div(cost, big.NewInt(K))

	packedOutput, err := PackGetCostOutput(cost)
	if err != nil {
		return nil, remainingGas, err
	}

	return packedOutput, remainingGas, nil
}

func getPrice(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetPriceGasCost); err != nil {
		return nil, 0, err
	}

	currentSupply, err := UnpackGetPriceInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	exponent := new(big.Int).Mul(big.NewInt(K), currentSupply)
	exponent.Div(exponent, big.NewInt(ExpPrecision))

	price := new(big.Int).Mul(big.NewInt(InitialPrice), calculateExp(exponent))

	packedOutput, err := PackGetPriceOutput(price)
	if err != nil {
		return nil, remainingGas, err
	}

	return packedOutput, remainingGas, nil
}

func calculateExp(x *big.Int) *big.Int {
	result := big.NewInt(ExpPrecision)
	term := big.NewInt(ExpPrecision)
	xPower := new(big.Int).Set(x)

	for i := 1; i <= MaxIterations; i++ {
		term.Mul(term, xPower)
		term.Div(term, big.NewInt(int64(i)))
		term.Div(term, big.NewInt(ExpPrecision))

		result.Add(result, term)

		if term.Cmp(big.NewInt(1)) < 0 {
			break
		}
	}

	return result
}

// UnpackGetPriceInput attempts to unpack [input] into the *big.Int type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetPriceInput(input []byte) (*big.Int, error) {
	res, err := BondingCurvePrecompileABI.UnpackInput("getPrice", input, false)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

// PackGetPrice packs [currentSupply] of type *big.Int into the appropriate arguments for getPrice.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetPrice(currentSupply *big.Int) ([]byte, error) {
	return BondingCurvePrecompileABI.Pack("getPrice", currentSupply)
}

// PackGetPriceOutput attempts to pack given price of type *big.Int
// to conform the ABI outputs.
func PackGetPriceOutput(price *big.Int) ([]byte, error) {
	return BondingCurvePrecompileABI.PackOutput("getPrice", price)
}

// UnpackGetPriceOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetPriceOutput(output []byte) (*big.Int, error) {
	res, err := BondingCurvePrecompileABI.Unpack("getPrice", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}


// createBondingCurvePrecompilePrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createBondingCurvePrecompilePrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getCost":  getCost,
		"getPrice": getPrice,
	}

	for name, function := range abiFunctionMap {
		method, ok := BondingCurvePrecompileABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
